@using Select_Multiple_Item.Entities
@using Select_Multiple_Item.Enums
@{
    ViewData["Title"] = "Car List";
}
@model (List<Car> , List<string>,  List<string> )
<div id="app">
    
   <div>
     <div id="filter-form" >
            <div class="row mb-3">
                <label class="col-sm-4 col-form-label">Manufacturer</label>
                <div class="col-sm-8">
                    <select id="filterbymanufacturer" class="form-select select2" v-model="selectedManufacturers" name="filterbymanufacturer" multiple>
                        <option v-for="manufacturer in manufacturers" :key="manufacturer" :value="manufacturer">
                            {{ manufacturer }}
                        </option>
                    </select>
                </div>
            </div>
            <div class="row mb-3">
                <label class="col-sm-4 col-form-label">Colors</label>
                <div class="col-sm-8">
                    <select id="filterbycolor" class="form-select select2"v-model="selectedColors" name="filterbycolor" multiple>
                        <option v-for="color in colors" :key="color" :value="color">
                            {{ color }}
                        </option>
                    </select>
                </div>
            </div>

            <label for="MinPrice">Minimum Price:</label>
            <input type="number" id="MinPrice" v-model="minPrice" name="MinPrice" step="0.01" min="0" />

            <label for="MaxPrice">Maximum Price:</label>
            <input type="number" id="MaxPrice" v-model="maxPrice" name="MaxPrice" step="0.01" min="0" />

            <div class="d-flex justify-content-end mb-3">
                <button @@click="applyFilters" class="btn btn-primary">Filter</button>
                <a href="/CarWithVueJs" class="btn btn-secondary ms-3">Back to List</a>
            </div>
    </div>
        <div v-if="filteredCars.length > 0">
            <div class="row pb-3">
                <div class="col-6">
                </div>
                <div class="col-6 text-end">
                    <a asp-controller="CarWithVueJs" asp-action="Create" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Create New Car
                    </a>
                </div>
            </div>
            <table  class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Manufacturer</th>
                        <th>Model</th>
                        <th>Color</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="car in filteredCars" :key="car.id">
                        <td>{{ car.id }}</td>
                        <td>{{ manufacturers[car.manufacturer] }}</td>
                        <td>{{ car.model }}</td>
                        <td>{{ colors[car.color] }}</td>
                        <td>{{ car.price }}</td>
                    </tr>
                </tbody>
            </table>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item" :class="{ disabled: currentPage === 1 }">
                        <button class="page-link" @@click="changePage(currentPage - 1)">Previous</button>
                    </li>
                    <li class="page-item" v-for="page in totalPages" :key="page" :class="{ active: currentPage == page }">
                        <button class="page-link" @@click="changePage(page)">{{ page }}</button>
                    </li>
                    <li class="page-item" :class="{ disabled: currentPage === totalPages }">
                        <button class="page-link" @@click="changePage(currentPage + 1)">Next</button>
                    </li>
                </ul>
            </nav>
        </div>
       
    
        <div v-else>
            <p>No cars found matching your filters.</p>
        </div>
    </div>
    
</div>


<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>



<script>
    new Vue({
        el: '#app',
        data: {
            cars: @Html.Raw(Json.Serialize(Model.Item1)),
            colors: @Html.Raw(Json.Serialize(Enum.GetNames(typeof(Colors)))),
            manufacturers: @Html.Raw(Json.Serialize(Enum.GetNames(typeof(Manufacturers)))),
            selectedManufacturers: '',
            selectedColors: '',
            minPrice: null,
            maxPrice: null,
            filteredCars: [],
            currentPage: 1,
            totalPages: 0,
            pageSize: 10,
            totalItems : 0,
        },

        methods: {
            applyFilters: async function () {
                try {
                    let selected = document.getElementById("filterbycolor").selectedOptions;
                    let newArray = [];
                    for (let i = 0; i < selected.length; i++) {
                        newArray.push(selected[i]._value);
                    }
                    let selectedmanufacturer = document.getElementById("filterbymanufacturer").selectedOptions;
                    let newArraymanufacturer = [];
                    for (let i = 0; i < selectedmanufacturer.length; i++) {
                        newArraymanufacturer.push(selectedmanufacturer[i]._value);
                    }

                    let queryParams = new URLSearchParams();

                    if (newArray.length > 0) {
                        queryParams.append("filterbycolor", newArray.join(","));
                    }
                    if (newArraymanufacturer.length > 0) {
                        queryParams.append("filterbymanufacturer", newArraymanufacturer.join(","));
                    }
                    if (this.minPrice) {
                        queryParams.append("MinPrice", this.minPrice);
                    }
                    if (this.maxPrice) {
                        queryParams.append("MaxPrice", this.maxPrice);
                    }

                    if (this.currentPage) queryParams.append("page", this.currentPage);
                    if (this.pageSize) queryParams.append("pageSize", this.pageSize);

                    window.history.pushState(null, '', '/CarWithVueJs/?' + queryParams.toString());

                    const response = await axios.get('/CarWithVueJs/Filter?' + queryParams.toString());

                    console.log(response.data.data);

                    this.filteredCars = response.data.data;

                    this.totalItems = response.data.totalItems;

                    this.totalPages = Math.ceil(this.totalItems / this.pageSize);

                } catch (error) {
                    console.error('Error fetching filtered cars:', error);
                }
            },

            filterCars: function () {
                this.applyFilters();
            },
            // getPagedData: async function () {
            //     try {
            //         let queryParams = new URLSearchParams();

            //         if (this.currentPage) queryParams.append("page", this.currentPage);
            //         if (this.pageSize) queryParams.append("pageSize", this.pageSize);

            //         const response = await axios.get('/CarWithVueJs/GetPagedData?' + queryParams.toString());
            //         console.log(response.data.data);
            //         this.filteredCars = response.data.data;
            //         this.totalItems = response.data.totalItem;
            //         this.totalPages = Math.ceil(this.totalItems / this.pageSize);
            //     } catch (error) {
            //         console.error('Error fetching paged data:', error);
            //     }
            // },
            changePage: function (page) {
                if (page > 0 && page <= this.totalPages) {
                    this.currentPage = page;
                    this.applyFilters(); 
                }
            },
        },

        beforeMount() {

            const urlParams = new URLSearchParams(window.location.search);
            const filtercolor = urlParams.get('filterbycolor');
            const filterbymanufacturer = urlParams.get('filterbymanufacturer');
            const MinPrice = urlParams.get('MinPrice');
            const MaxPrice = urlParams.get('MaxPrice');
            const Page = urlParams.get('page');
            const Pagesize = urlParams.get('pageSize');

            this.selectedColors = filtercolor ? filtercolor.split(',') : [];
            this.selectedManufacturers = filterbymanufacturer ? filterbymanufacturer.split(',') : [];
            this.minPrice = MinPrice ? parseFloat(MinPrice) : null;
            this.maxPrice = MaxPrice ? parseFloat(MaxPrice) : null;
            this.currentPage = Page ? parseInt(Page) : 1;
            this.pageSize = Pagesize ? parseInt(Pagesize) : 10;
            this.totalPages = 10;

        },
          mounted() {
             
            this.filterCars();
            // this.getPagedData();

          },
        
    });
</script>


 @* watch: {
     'maxPrice'(to, from) {
         console.log(to, from);
        }
    }, *@

  @*    if (queryParams.toString()) {
                         window.history.pushState(null, '', '/CarWithVueJs/?' + queryParams.toString());
                     } else {
                         window.history.pushState(null, '', '/CarWithVueJs');
                     }
 *@
             @* if (!this.filteredCars.length) {
                this.filteredCars = this.cars;
            }
            this.applyFilters(); *@



